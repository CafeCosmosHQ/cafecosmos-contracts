// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import { Test, console2 } from "forge-std/Test.sol";
import { SoftTokenPermissioned } from "../src/tokens/SoftTokenPermissioned.sol";
import { ItemsPermissioned } from "../src/tokens/ItemsPermissioned.sol";
import { CafeCosmosTest } from "./util/CafeCosmosTest.sol";

contract PermissionedTokensTest is CafeCosmosTest {

    address alice = address(0xa);
    address bob = address(0xb);
    
    address land = address(0x1);
    address redistributor = address(0x2);

    ItemsPermissioned items;
    SoftTokenPermissioned softToken;

    function setUp() public {
        items = new ItemsPermissioned("ipfs://");
        softToken = new SoftTokenPermissioned("SoftToken", "ST");

        address[] memory whitelist = new address[](2);
        whitelist[0] = land;
        whitelist[1] = redistributor;

        bool[] memory IsWhitelist = new bool[](2);
        IsWhitelist[0] = true;
        IsWhitelist[1] = true;
        
        items.setWhitelist(whitelist, IsWhitelist);
        softToken.setWhitelist(whitelist, IsWhitelist);
        
    }

    function test_itemsTransferFrom() public {
        items.mint(alice, 1337, 1, "");

        vm.startPrank(alice);
        vm.expectRevert("ItemsPermissioned: only whitelisted addresses can transfer");
        items.safeTransferFrom(alice, bob, 1337, 1, "");
        
        items.safeTransferFrom(alice, land, 1337, 1, "");
        assertEq(items.balanceOf(land, 1337), 1);  
        assertEq(items.balanceOf(alice, 1337), 0);
        vm.stopPrank();

        vm.prank(land);
        items.safeTransferFrom(land, alice, 1337, 1, "");
        assertEq(items.balanceOf(land, 1337), 0);
        assertEq(items.balanceOf(alice, 1337), 1);
    }

    function test_itemsBatchTransferFrom() public {
        items.mint(alice, 1337, 1, "");

        uint[] memory ids = new uint[](1);
        ids[0] = 1337;
        
        uint[] memory amounts = new uint[](1);
        amounts[0] = 1;

        vm.startPrank(alice);
        vm.expectRevert("ItemsPermissioned: only whitelisted addresses can transfer");
        items.safeBatchTransferFrom(alice, bob, ids, amounts, "");
        
        items.safeBatchTransferFrom(alice, land, ids, amounts, "");
        assertEq(items.balanceOf(land, 1337), 1);  
        assertEq(items.balanceOf(alice, 1337), 0);
        vm.stopPrank();

        vm.prank(land);
        items.safeBatchTransferFrom(land, alice, ids, amounts, "");
        assertEq(items.balanceOf(land, 1337), 0);
        assertEq(items.balanceOf(alice, 1337), 1);
    }

    function test_softTokenTransfer() public {
        softToken.mint(alice, 1);

        vm.startPrank(alice);
        vm.expectRevert("SoftTokenPermissioned: only whitelisted addresses can transfer");
        softToken.transfer(bob, 1);
        
        softToken.transfer(land, 1);
        assertEq(softToken.balanceOf(land), 1);  
        assertEq(softToken.balanceOf(alice), 0);
        vm.stopPrank();

        vm.prank(land);
        softToken.transfer(alice, 1);
        assertEq(softToken.balanceOf(land), 0);
        assertEq(softToken.balanceOf(alice), 1);
    }

    function test_softTokenTransferFrom() public {
        softToken.mint(alice, 1);

        vm.startPrank(alice);
        vm.expectRevert("SoftTokenPermissioned: only whitelisted addresses can transfer");
        softToken.transferFrom(alice, bob, 1);
        
        softToken.approve(bob, 1);
        vm.stopPrank();

        vm.prank(bob);
        vm.expectRevert("SoftTokenPermissioned: only whitelisted addresses can transfer");
        softToken.transferFrom(alice, bob, 1);

        vm.startPrank(alice);
        softToken.approve(alice, 1);
        softToken.transferFrom(alice, land, 1);
        assertEq(softToken.balanceOf(land), 1);  
        assertEq(softToken.balanceOf(alice), 0);
        vm.stopPrank();

        vm.startPrank(land);
        softToken.approve(land, 1);
        softToken.transferFrom(land, alice, 1);
        assertEq(softToken.balanceOf(land), 0);
        assertEq(softToken.balanceOf(alice), 1);
    }

}