// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct LandInfoData {
  uint256 limitX;
  uint256 limitY;
  uint256 activeTables;
  uint256 activeStoves;
  bool isInitialized;
  uint32 seed;
  uint256 tokenBalance;
  uint256 cumulativeXp;
  uint256 lastLevelClaimed;
  uint256[] yBound;
}

library LandInfo {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "LandInfo", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004c616e64496e666f0000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00e5090120202020010420202000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, bool, uint32, uint256, uint256, uint256, uint256[])
  Schema constant _valueSchema = Schema.wrap(0x00e509011f1f1f1f60031f1f1f81000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "landId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "limitX";
    fieldNames[1] = "limitY";
    fieldNames[2] = "activeTables";
    fieldNames[3] = "activeStoves";
    fieldNames[4] = "isInitialized";
    fieldNames[5] = "seed";
    fieldNames[6] = "tokenBalance";
    fieldNames[7] = "cumulativeXp";
    fieldNames[8] = "lastLevelClaimed";
    fieldNames[9] = "yBound";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get limitX.
   */
  function getLimitX(uint256 landId) internal view returns (uint256 limitX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get limitX.
   */
  function _getLimitX(uint256 landId) internal view returns (uint256 limitX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set limitX.
   */
  function setLimitX(uint256 landId, uint256 limitX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((limitX)), _fieldLayout);
  }

  /**
   * @notice Set limitX.
   */
  function _setLimitX(uint256 landId, uint256 limitX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((limitX)), _fieldLayout);
  }

  /**
   * @notice Get limitY.
   */
  function getLimitY(uint256 landId) internal view returns (uint256 limitY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get limitY.
   */
  function _getLimitY(uint256 landId) internal view returns (uint256 limitY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set limitY.
   */
  function setLimitY(uint256 landId, uint256 limitY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((limitY)), _fieldLayout);
  }

  /**
   * @notice Set limitY.
   */
  function _setLimitY(uint256 landId, uint256 limitY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((limitY)), _fieldLayout);
  }

  /**
   * @notice Get activeTables.
   */
  function getActiveTables(uint256 landId) internal view returns (uint256 activeTables) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get activeTables.
   */
  function _getActiveTables(uint256 landId) internal view returns (uint256 activeTables) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set activeTables.
   */
  function setActiveTables(uint256 landId, uint256 activeTables) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((activeTables)), _fieldLayout);
  }

  /**
   * @notice Set activeTables.
   */
  function _setActiveTables(uint256 landId, uint256 activeTables) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((activeTables)), _fieldLayout);
  }

  /**
   * @notice Get activeStoves.
   */
  function getActiveStoves(uint256 landId) internal view returns (uint256 activeStoves) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get activeStoves.
   */
  function _getActiveStoves(uint256 landId) internal view returns (uint256 activeStoves) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set activeStoves.
   */
  function setActiveStoves(uint256 landId, uint256 activeStoves) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((activeStoves)), _fieldLayout);
  }

  /**
   * @notice Set activeStoves.
   */
  function _setActiveStoves(uint256 landId, uint256 activeStoves) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((activeStoves)), _fieldLayout);
  }

  /**
   * @notice Get isInitialized.
   */
  function getIsInitialized(uint256 landId) internal view returns (bool isInitialized) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isInitialized.
   */
  function _getIsInitialized(uint256 landId) internal view returns (bool isInitialized) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isInitialized.
   */
  function setIsInitialized(uint256 landId, bool isInitialized) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isInitialized)), _fieldLayout);
  }

  /**
   * @notice Set isInitialized.
   */
  function _setIsInitialized(uint256 landId, bool isInitialized) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isInitialized)), _fieldLayout);
  }

  /**
   * @notice Get seed.
   */
  function getSeed(uint256 landId) internal view returns (uint32 seed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get seed.
   */
  function _getSeed(uint256 landId) internal view returns (uint32 seed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set seed.
   */
  function setSeed(uint256 landId, uint32 seed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((seed)), _fieldLayout);
  }

  /**
   * @notice Set seed.
   */
  function _setSeed(uint256 landId, uint32 seed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((seed)), _fieldLayout);
  }

  /**
   * @notice Get tokenBalance.
   */
  function getTokenBalance(uint256 landId) internal view returns (uint256 tokenBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get tokenBalance.
   */
  function _getTokenBalance(uint256 landId) internal view returns (uint256 tokenBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set tokenBalance.
   */
  function setTokenBalance(uint256 landId, uint256 tokenBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((tokenBalance)), _fieldLayout);
  }

  /**
   * @notice Set tokenBalance.
   */
  function _setTokenBalance(uint256 landId, uint256 tokenBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((tokenBalance)), _fieldLayout);
  }

  /**
   * @notice Get cumulativeXp.
   */
  function getCumulativeXp(uint256 landId) internal view returns (uint256 cumulativeXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cumulativeXp.
   */
  function _getCumulativeXp(uint256 landId) internal view returns (uint256 cumulativeXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cumulativeXp.
   */
  function setCumulativeXp(uint256 landId, uint256 cumulativeXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((cumulativeXp)), _fieldLayout);
  }

  /**
   * @notice Set cumulativeXp.
   */
  function _setCumulativeXp(uint256 landId, uint256 cumulativeXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((cumulativeXp)), _fieldLayout);
  }

  /**
   * @notice Get lastLevelClaimed.
   */
  function getLastLevelClaimed(uint256 landId) internal view returns (uint256 lastLevelClaimed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastLevelClaimed.
   */
  function _getLastLevelClaimed(uint256 landId) internal view returns (uint256 lastLevelClaimed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastLevelClaimed.
   */
  function setLastLevelClaimed(uint256 landId, uint256 lastLevelClaimed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((lastLevelClaimed)), _fieldLayout);
  }

  /**
   * @notice Set lastLevelClaimed.
   */
  function _setLastLevelClaimed(uint256 landId, uint256 lastLevelClaimed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((lastLevelClaimed)), _fieldLayout);
  }

  /**
   * @notice Get yBound.
   */
  function getYBound(uint256 landId) internal view returns (uint256[] memory yBound) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get yBound.
   */
  function _getYBound(uint256 landId) internal view returns (uint256[] memory yBound) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set yBound.
   */
  function setYBound(uint256 landId, uint256[] memory yBound) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((yBound)));
  }

  /**
   * @notice Set yBound.
   */
  function _setYBound(uint256 landId, uint256[] memory yBound) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((yBound)));
  }

  /**
   * @notice Get the length of yBound.
   */
  function lengthYBound(uint256 landId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of yBound.
   */
  function _lengthYBound(uint256 landId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of yBound.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemYBound(uint256 landId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of yBound.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemYBound(uint256 landId, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to yBound.
   */
  function pushYBound(uint256 landId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to yBound.
   */
  function _pushYBound(uint256 landId, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from yBound.
   */
  function popYBound(uint256 landId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from yBound.
   */
  function _popYBound(uint256 landId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of yBound at `_index`.
   */
  function updateYBound(uint256 landId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of yBound at `_index`.
   */
  function _updateYBound(uint256 landId, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 landId) internal view returns (LandInfoData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 landId) internal view returns (LandInfoData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 landId,
    uint256 limitX,
    uint256 limitY,
    uint256 activeTables,
    uint256 activeStoves,
    bool isInitialized,
    uint32 seed,
    uint256 tokenBalance,
    uint256 cumulativeXp,
    uint256 lastLevelClaimed,
    uint256[] memory yBound
  ) internal {
    bytes memory _staticData = encodeStatic(
      limitX,
      limitY,
      activeTables,
      activeStoves,
      isInitialized,
      seed,
      tokenBalance,
      cumulativeXp,
      lastLevelClaimed
    );

    EncodedLengths _encodedLengths = encodeLengths(yBound);
    bytes memory _dynamicData = encodeDynamic(yBound);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 landId,
    uint256 limitX,
    uint256 limitY,
    uint256 activeTables,
    uint256 activeStoves,
    bool isInitialized,
    uint32 seed,
    uint256 tokenBalance,
    uint256 cumulativeXp,
    uint256 lastLevelClaimed,
    uint256[] memory yBound
  ) internal {
    bytes memory _staticData = encodeStatic(
      limitX,
      limitY,
      activeTables,
      activeStoves,
      isInitialized,
      seed,
      tokenBalance,
      cumulativeXp,
      lastLevelClaimed
    );

    EncodedLengths _encodedLengths = encodeLengths(yBound);
    bytes memory _dynamicData = encodeDynamic(yBound);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 landId, LandInfoData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.limitX,
      _table.limitY,
      _table.activeTables,
      _table.activeStoves,
      _table.isInitialized,
      _table.seed,
      _table.tokenBalance,
      _table.cumulativeXp,
      _table.lastLevelClaimed
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.yBound);
    bytes memory _dynamicData = encodeDynamic(_table.yBound);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 landId, LandInfoData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.limitX,
      _table.limitY,
      _table.activeTables,
      _table.activeStoves,
      _table.isInitialized,
      _table.seed,
      _table.tokenBalance,
      _table.cumulativeXp,
      _table.lastLevelClaimed
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.yBound);
    bytes memory _dynamicData = encodeDynamic(_table.yBound);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 limitX,
      uint256 limitY,
      uint256 activeTables,
      uint256 activeStoves,
      bool isInitialized,
      uint32 seed,
      uint256 tokenBalance,
      uint256 cumulativeXp,
      uint256 lastLevelClaimed
    )
  {
    limitX = (uint256(Bytes.getBytes32(_blob, 0)));

    limitY = (uint256(Bytes.getBytes32(_blob, 32)));

    activeTables = (uint256(Bytes.getBytes32(_blob, 64)));

    activeStoves = (uint256(Bytes.getBytes32(_blob, 96)));

    isInitialized = (_toBool(uint8(Bytes.getBytes1(_blob, 128))));

    seed = (uint32(Bytes.getBytes4(_blob, 129)));

    tokenBalance = (uint256(Bytes.getBytes32(_blob, 133)));

    cumulativeXp = (uint256(Bytes.getBytes32(_blob, 165)));

    lastLevelClaimed = (uint256(Bytes.getBytes32(_blob, 197)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[] memory yBound) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    yBound = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (LandInfoData memory _table) {
    (
      _table.limitX,
      _table.limitY,
      _table.activeTables,
      _table.activeStoves,
      _table.isInitialized,
      _table.seed,
      _table.tokenBalance,
      _table.cumulativeXp,
      _table.lastLevelClaimed
    ) = decodeStatic(_staticData);

    (_table.yBound) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 landId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 landId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 limitX,
    uint256 limitY,
    uint256 activeTables,
    uint256 activeStoves,
    bool isInitialized,
    uint32 seed,
    uint256 tokenBalance,
    uint256 cumulativeXp,
    uint256 lastLevelClaimed
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        limitX,
        limitY,
        activeTables,
        activeStoves,
        isInitialized,
        seed,
        tokenBalance,
        cumulativeXp,
        lastLevelClaimed
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint256[] memory yBound) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(yBound.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[] memory yBound) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((yBound)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 limitX,
    uint256 limitY,
    uint256 activeTables,
    uint256 activeStoves,
    bool isInitialized,
    uint32 seed,
    uint256 tokenBalance,
    uint256 cumulativeXp,
    uint256 lastLevelClaimed,
    uint256[] memory yBound
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      limitX,
      limitY,
      activeTables,
      activeStoves,
      isInitialized,
      seed,
      tokenBalance,
      cumulativeXp,
      lastLevelClaimed
    );

    EncodedLengths _encodedLengths = encodeLengths(yBound);
    bytes memory _dynamicData = encodeDynamic(yBound);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 landId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(landId));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
