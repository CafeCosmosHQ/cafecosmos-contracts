// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ConfigAddressesData {
  address vestingAddress;
  address softTokenAddress;
  address itemsAddress;
  address redistributorAddress;
  address landNFTsAddress;
  address softDestinationAddress;
  address perlinItemConfigAddress;
  address landTransformAddress;
  address landTablesAndChairsAddress;
  address landQuestTaskProgressUpdateAddress;
  address vrgdaAddress;
}

library ConfigAddresses {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "ConfigAddresses", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000436f6e66696741646472657373657300);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00dc0b0014141414141414141414140000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, address, address, address, address, address, address, address, address, address, address)
  Schema constant _valueSchema = Schema.wrap(0x00dc0b0061616161616161616161610000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](11);
    fieldNames[0] = "vestingAddress";
    fieldNames[1] = "softTokenAddress";
    fieldNames[2] = "itemsAddress";
    fieldNames[3] = "redistributorAddress";
    fieldNames[4] = "landNFTsAddress";
    fieldNames[5] = "softDestinationAddress";
    fieldNames[6] = "perlinItemConfigAddress";
    fieldNames[7] = "landTransformAddress";
    fieldNames[8] = "landTablesAndChairsAddress";
    fieldNames[9] = "landQuestTaskProgressUpdateAddress";
    fieldNames[10] = "vrgdaAddress";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get vestingAddress.
   */
  function getVestingAddress() internal view returns (address vestingAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get vestingAddress.
   */
  function _getVestingAddress() internal view returns (address vestingAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set vestingAddress.
   */
  function setVestingAddress(address vestingAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((vestingAddress)), _fieldLayout);
  }

  /**
   * @notice Set vestingAddress.
   */
  function _setVestingAddress(address vestingAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((vestingAddress)), _fieldLayout);
  }

  /**
   * @notice Get softTokenAddress.
   */
  function getSoftTokenAddress() internal view returns (address softTokenAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get softTokenAddress.
   */
  function _getSoftTokenAddress() internal view returns (address softTokenAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set softTokenAddress.
   */
  function setSoftTokenAddress(address softTokenAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((softTokenAddress)), _fieldLayout);
  }

  /**
   * @notice Set softTokenAddress.
   */
  function _setSoftTokenAddress(address softTokenAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((softTokenAddress)), _fieldLayout);
  }

  /**
   * @notice Get itemsAddress.
   */
  function getItemsAddress() internal view returns (address itemsAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get itemsAddress.
   */
  function _getItemsAddress() internal view returns (address itemsAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set itemsAddress.
   */
  function setItemsAddress(address itemsAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((itemsAddress)), _fieldLayout);
  }

  /**
   * @notice Set itemsAddress.
   */
  function _setItemsAddress(address itemsAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((itemsAddress)), _fieldLayout);
  }

  /**
   * @notice Get redistributorAddress.
   */
  function getRedistributorAddress() internal view returns (address redistributorAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get redistributorAddress.
   */
  function _getRedistributorAddress() internal view returns (address redistributorAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set redistributorAddress.
   */
  function setRedistributorAddress(address redistributorAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((redistributorAddress)), _fieldLayout);
  }

  /**
   * @notice Set redistributorAddress.
   */
  function _setRedistributorAddress(address redistributorAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((redistributorAddress)), _fieldLayout);
  }

  /**
   * @notice Get landNFTsAddress.
   */
  function getLandNFTsAddress() internal view returns (address landNFTsAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get landNFTsAddress.
   */
  function _getLandNFTsAddress() internal view returns (address landNFTsAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set landNFTsAddress.
   */
  function setLandNFTsAddress(address landNFTsAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((landNFTsAddress)), _fieldLayout);
  }

  /**
   * @notice Set landNFTsAddress.
   */
  function _setLandNFTsAddress(address landNFTsAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((landNFTsAddress)), _fieldLayout);
  }

  /**
   * @notice Get softDestinationAddress.
   */
  function getSoftDestinationAddress() internal view returns (address softDestinationAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get softDestinationAddress.
   */
  function _getSoftDestinationAddress() internal view returns (address softDestinationAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set softDestinationAddress.
   */
  function setSoftDestinationAddress(address softDestinationAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((softDestinationAddress)), _fieldLayout);
  }

  /**
   * @notice Set softDestinationAddress.
   */
  function _setSoftDestinationAddress(address softDestinationAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((softDestinationAddress)), _fieldLayout);
  }

  /**
   * @notice Get perlinItemConfigAddress.
   */
  function getPerlinItemConfigAddress() internal view returns (address perlinItemConfigAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get perlinItemConfigAddress.
   */
  function _getPerlinItemConfigAddress() internal view returns (address perlinItemConfigAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set perlinItemConfigAddress.
   */
  function setPerlinItemConfigAddress(address perlinItemConfigAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((perlinItemConfigAddress)), _fieldLayout);
  }

  /**
   * @notice Set perlinItemConfigAddress.
   */
  function _setPerlinItemConfigAddress(address perlinItemConfigAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((perlinItemConfigAddress)), _fieldLayout);
  }

  /**
   * @notice Get landTransformAddress.
   */
  function getLandTransformAddress() internal view returns (address landTransformAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get landTransformAddress.
   */
  function _getLandTransformAddress() internal view returns (address landTransformAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set landTransformAddress.
   */
  function setLandTransformAddress(address landTransformAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((landTransformAddress)), _fieldLayout);
  }

  /**
   * @notice Set landTransformAddress.
   */
  function _setLandTransformAddress(address landTransformAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((landTransformAddress)), _fieldLayout);
  }

  /**
   * @notice Get landTablesAndChairsAddress.
   */
  function getLandTablesAndChairsAddress() internal view returns (address landTablesAndChairsAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get landTablesAndChairsAddress.
   */
  function _getLandTablesAndChairsAddress() internal view returns (address landTablesAndChairsAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set landTablesAndChairsAddress.
   */
  function setLandTablesAndChairsAddress(address landTablesAndChairsAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((landTablesAndChairsAddress)), _fieldLayout);
  }

  /**
   * @notice Set landTablesAndChairsAddress.
   */
  function _setLandTablesAndChairsAddress(address landTablesAndChairsAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((landTablesAndChairsAddress)), _fieldLayout);
  }

  /**
   * @notice Get landQuestTaskProgressUpdateAddress.
   */
  function getLandQuestTaskProgressUpdateAddress() internal view returns (address landQuestTaskProgressUpdateAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get landQuestTaskProgressUpdateAddress.
   */
  function _getLandQuestTaskProgressUpdateAddress() internal view returns (address landQuestTaskProgressUpdateAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set landQuestTaskProgressUpdateAddress.
   */
  function setLandQuestTaskProgressUpdateAddress(address landQuestTaskProgressUpdateAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(
      _tableId,
      _keyTuple,
      9,
      abi.encodePacked((landQuestTaskProgressUpdateAddress)),
      _fieldLayout
    );
  }

  /**
   * @notice Set landQuestTaskProgressUpdateAddress.
   */
  function _setLandQuestTaskProgressUpdateAddress(address landQuestTaskProgressUpdateAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(
      _tableId,
      _keyTuple,
      9,
      abi.encodePacked((landQuestTaskProgressUpdateAddress)),
      _fieldLayout
    );
  }

  /**
   * @notice Get vrgdaAddress.
   */
  function getVrgdaAddress() internal view returns (address vrgdaAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get vrgdaAddress.
   */
  function _getVrgdaAddress() internal view returns (address vrgdaAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set vrgdaAddress.
   */
  function setVrgdaAddress(address vrgdaAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((vrgdaAddress)), _fieldLayout);
  }

  /**
   * @notice Set vrgdaAddress.
   */
  function _setVrgdaAddress(address vrgdaAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((vrgdaAddress)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (ConfigAddressesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (ConfigAddressesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address vestingAddress,
    address softTokenAddress,
    address itemsAddress,
    address redistributorAddress,
    address landNFTsAddress,
    address softDestinationAddress,
    address perlinItemConfigAddress,
    address landTransformAddress,
    address landTablesAndChairsAddress,
    address landQuestTaskProgressUpdateAddress,
    address vrgdaAddress
  ) internal {
    bytes memory _staticData = encodeStatic(
      vestingAddress,
      softTokenAddress,
      itemsAddress,
      redistributorAddress,
      landNFTsAddress,
      softDestinationAddress,
      perlinItemConfigAddress,
      landTransformAddress,
      landTablesAndChairsAddress,
      landQuestTaskProgressUpdateAddress,
      vrgdaAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address vestingAddress,
    address softTokenAddress,
    address itemsAddress,
    address redistributorAddress,
    address landNFTsAddress,
    address softDestinationAddress,
    address perlinItemConfigAddress,
    address landTransformAddress,
    address landTablesAndChairsAddress,
    address landQuestTaskProgressUpdateAddress,
    address vrgdaAddress
  ) internal {
    bytes memory _staticData = encodeStatic(
      vestingAddress,
      softTokenAddress,
      itemsAddress,
      redistributorAddress,
      landNFTsAddress,
      softDestinationAddress,
      perlinItemConfigAddress,
      landTransformAddress,
      landTablesAndChairsAddress,
      landQuestTaskProgressUpdateAddress,
      vrgdaAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(ConfigAddressesData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.vestingAddress,
      _table.softTokenAddress,
      _table.itemsAddress,
      _table.redistributorAddress,
      _table.landNFTsAddress,
      _table.softDestinationAddress,
      _table.perlinItemConfigAddress,
      _table.landTransformAddress,
      _table.landTablesAndChairsAddress,
      _table.landQuestTaskProgressUpdateAddress,
      _table.vrgdaAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(ConfigAddressesData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.vestingAddress,
      _table.softTokenAddress,
      _table.itemsAddress,
      _table.redistributorAddress,
      _table.landNFTsAddress,
      _table.softDestinationAddress,
      _table.perlinItemConfigAddress,
      _table.landTransformAddress,
      _table.landTablesAndChairsAddress,
      _table.landQuestTaskProgressUpdateAddress,
      _table.vrgdaAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      address vestingAddress,
      address softTokenAddress,
      address itemsAddress,
      address redistributorAddress,
      address landNFTsAddress,
      address softDestinationAddress,
      address perlinItemConfigAddress,
      address landTransformAddress,
      address landTablesAndChairsAddress,
      address landQuestTaskProgressUpdateAddress,
      address vrgdaAddress
    )
  {
    vestingAddress = (address(Bytes.getBytes20(_blob, 0)));

    softTokenAddress = (address(Bytes.getBytes20(_blob, 20)));

    itemsAddress = (address(Bytes.getBytes20(_blob, 40)));

    redistributorAddress = (address(Bytes.getBytes20(_blob, 60)));

    landNFTsAddress = (address(Bytes.getBytes20(_blob, 80)));

    softDestinationAddress = (address(Bytes.getBytes20(_blob, 100)));

    perlinItemConfigAddress = (address(Bytes.getBytes20(_blob, 120)));

    landTransformAddress = (address(Bytes.getBytes20(_blob, 140)));

    landTablesAndChairsAddress = (address(Bytes.getBytes20(_blob, 160)));

    landQuestTaskProgressUpdateAddress = (address(Bytes.getBytes20(_blob, 180)));

    vrgdaAddress = (address(Bytes.getBytes20(_blob, 200)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ConfigAddressesData memory _table) {
    (
      _table.vestingAddress,
      _table.softTokenAddress,
      _table.itemsAddress,
      _table.redistributorAddress,
      _table.landNFTsAddress,
      _table.softDestinationAddress,
      _table.perlinItemConfigAddress,
      _table.landTransformAddress,
      _table.landTablesAndChairsAddress,
      _table.landQuestTaskProgressUpdateAddress,
      _table.vrgdaAddress
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address vestingAddress,
    address softTokenAddress,
    address itemsAddress,
    address redistributorAddress,
    address landNFTsAddress,
    address softDestinationAddress,
    address perlinItemConfigAddress,
    address landTransformAddress,
    address landTablesAndChairsAddress,
    address landQuestTaskProgressUpdateAddress,
    address vrgdaAddress
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        vestingAddress,
        softTokenAddress,
        itemsAddress,
        redistributorAddress,
        landNFTsAddress,
        softDestinationAddress,
        perlinItemConfigAddress,
        landTransformAddress,
        landTablesAndChairsAddress,
        landQuestTaskProgressUpdateAddress,
        vrgdaAddress
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address vestingAddress,
    address softTokenAddress,
    address itemsAddress,
    address redistributorAddress,
    address landNFTsAddress,
    address softDestinationAddress,
    address perlinItemConfigAddress,
    address landTransformAddress,
    address landTablesAndChairsAddress,
    address landQuestTaskProgressUpdateAddress,
    address vrgdaAddress
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      vestingAddress,
      softTokenAddress,
      itemsAddress,
      redistributorAddress,
      landNFTsAddress,
      softDestinationAddress,
      perlinItemConfigAddress,
      landTransformAddress,
      landTablesAndChairsAddress,
      landQuestTaskProgressUpdateAddress,
      vrgdaAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
