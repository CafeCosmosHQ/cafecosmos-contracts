// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct LandTablesAndChairsData {
  uint256[3] chairsOfTables;
  uint256[3] tablesOfChairs;
}

library LandTablesAndChairs {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "LandTablesAndCha", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004c616e645461626c6573416e64436861);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0000000200000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x006003001f1f1f00000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256[], uint256[])
  Schema constant _valueSchema = Schema.wrap(0x0000000281810000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "landId";
    keyNames[1] = "x";
    keyNames[2] = "y";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "chairsOfTables";
    fieldNames[1] = "tablesOfChairs";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get chairsOfTables.
   */
  function getChairsOfTables(
    uint256 landId,
    uint256 x,
    uint256 y
  ) internal view returns (uint256[3] memory chairsOfTables) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint256_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get chairsOfTables.
   */
  function _getChairsOfTables(
    uint256 landId,
    uint256 x,
    uint256 y
  ) internal view returns (uint256[3] memory chairsOfTables) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return toStaticArray_uint256_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set chairsOfTables.
   */
  function setChairsOfTables(uint256 landId, uint256 x, uint256 y, uint256[3] memory chairsOfTables) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode(fromStaticArray_uint256_3(chairsOfTables)));
  }

  /**
   * @notice Set chairsOfTables.
   */
  function _setChairsOfTables(uint256 landId, uint256 x, uint256 y, uint256[3] memory chairsOfTables) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode(fromStaticArray_uint256_3(chairsOfTables)));
  }

  // The length of chairsOfTables
  uint256 constant lengthChairsOfTables = 3;

  /**
   * @notice Get an item of chairsOfTables.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemChairsOfTables(uint256 landId, uint256 x, uint256 y, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    uint256 dynamicLength = _byteLength / 32;
    uint256 staticLength = 3;

    if (_index < staticLength && _index >= dynamicLength) {
      return (uint256(bytes32(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of chairsOfTables.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemChairsOfTables(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 _index
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    uint256 dynamicLength = _byteLength / 32;
    uint256 staticLength = 3;

    if (_index < staticLength && _index >= dynamicLength) {
      return (uint256(bytes32(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Update an element of chairsOfTables at `_index`.
   */
  function updateChairsOfTables(uint256 landId, uint256 x, uint256 y, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of chairsOfTables at `_index`.
   */
  function _updateChairsOfTables(uint256 landId, uint256 x, uint256 y, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get tablesOfChairs.
   */
  function getTablesOfChairs(
    uint256 landId,
    uint256 x,
    uint256 y
  ) internal view returns (uint256[3] memory tablesOfChairs) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return toStaticArray_uint256_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get tablesOfChairs.
   */
  function _getTablesOfChairs(
    uint256 landId,
    uint256 x,
    uint256 y
  ) internal view returns (uint256[3] memory tablesOfChairs) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return toStaticArray_uint256_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set tablesOfChairs.
   */
  function setTablesOfChairs(uint256 landId, uint256 x, uint256 y, uint256[3] memory tablesOfChairs) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint256_3(tablesOfChairs)));
  }

  /**
   * @notice Set tablesOfChairs.
   */
  function _setTablesOfChairs(uint256 landId, uint256 x, uint256 y, uint256[3] memory tablesOfChairs) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint256_3(tablesOfChairs)));
  }

  // The length of tablesOfChairs
  uint256 constant lengthTablesOfChairs = 3;

  /**
   * @notice Get an item of tablesOfChairs.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTablesOfChairs(uint256 landId, uint256 x, uint256 y, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    uint256 dynamicLength = _byteLength / 32;
    uint256 staticLength = 3;

    if (_index < staticLength && _index >= dynamicLength) {
      return (uint256(bytes32(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of tablesOfChairs.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTablesOfChairs(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 _index
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    uint256 dynamicLength = _byteLength / 32;
    uint256 staticLength = 3;

    if (_index < staticLength && _index >= dynamicLength) {
      return (uint256(bytes32(new bytes(0))));
    }

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Update an element of tablesOfChairs at `_index`.
   */
  function updateTablesOfChairs(uint256 landId, uint256 x, uint256 y, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of tablesOfChairs at `_index`.
   */
  function _updateTablesOfChairs(uint256 landId, uint256 x, uint256 y, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 landId, uint256 x, uint256 y) internal view returns (LandTablesAndChairsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 landId, uint256 x, uint256 y) internal view returns (LandTablesAndChairsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256[3] memory chairsOfTables,
    uint256[3] memory tablesOfChairs
  ) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(chairsOfTables, tablesOfChairs);
    bytes memory _dynamicData = encodeDynamic(chairsOfTables, tablesOfChairs);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256[3] memory chairsOfTables,
    uint256[3] memory tablesOfChairs
  ) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(chairsOfTables, tablesOfChairs);
    bytes memory _dynamicData = encodeDynamic(chairsOfTables, tablesOfChairs);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 landId, uint256 x, uint256 y, LandTablesAndChairsData memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(_table.chairsOfTables, _table.tablesOfChairs);
    bytes memory _dynamicData = encodeDynamic(_table.chairsOfTables, _table.tablesOfChairs);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 landId, uint256 x, uint256 y, LandTablesAndChairsData memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(_table.chairsOfTables, _table.tablesOfChairs);
    bytes memory _dynamicData = encodeDynamic(_table.chairsOfTables, _table.tablesOfChairs);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[3] memory chairsOfTables, uint256[3] memory tablesOfChairs) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    chairsOfTables = toStaticArray_uint256_3(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    tablesOfChairs = toStaticArray_uint256_3(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   *
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (LandTablesAndChairsData memory _table) {
    (_table.chairsOfTables, _table.tablesOfChairs) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 landId, uint256 x, uint256 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 landId, uint256 x, uint256 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint256[3] memory chairsOfTables,
    uint256[3] memory tablesOfChairs
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(chairsOfTables.length * 32, tablesOfChairs.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint256[3] memory chairsOfTables,
    uint256[3] memory tablesOfChairs
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode(fromStaticArray_uint256_3(chairsOfTables)),
        EncodeArray.encode(fromStaticArray_uint256_3(tablesOfChairs))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256[3] memory chairsOfTables,
    uint256[3] memory tablesOfChairs
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(chairsOfTables, tablesOfChairs);
    bytes memory _dynamicData = encodeDynamic(chairsOfTables, tablesOfChairs);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 landId, uint256 x, uint256 y) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));

    return _keyTuple;
  }
}

/**
 * @notice Cast a dynamic array to a static array.
 * @dev In memory static arrays are just dynamic arrays without the 32 length bytes,
 * so this function moves the pointer to the first element of the dynamic array.
 * If the length of the dynamic array is smaller than the static length,
 * the function returns an uninitialized array to avoid memory corruption.
 * @param _value The dynamic array to cast.
 * @return _result The static array.
 */
function toStaticArray_uint256_3(uint256[] memory _value) pure returns (uint256[3] memory _result) {
  if (_value.length < 3) {
    // return an uninitialized array if the length is smaller than the fixed length to avoid memory corruption
    return _result;
  } else {
    // in memory static arrays are just dynamic arrays without the 32 length bytes
    // (without the length check this could lead to memory corruption)
    assembly {
      _result := add(_value, 0x20)
    }
  }
}

/**
 * @notice Copy a static array to a dynamic array.
 * @dev Static arrays don't have a length prefix, so this function copies the memory from the static array to a new dynamic array.
 * @param _value The static array to copy.
 * @return _result The dynamic array.
 */
function fromStaticArray_uint256_3(uint256[3] memory _value) pure returns (uint256[] memory _result) {
  _result = new uint256[](3);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 96);
}
