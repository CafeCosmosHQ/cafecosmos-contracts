// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ItemInfoData {
  bool nonRemovable;
  bool nonPlaceable;
  bool isTool;
  bool isTable;
  bool isChair;
  bool isRotatable;
  uint256 themeId;
  uint256 itemCategory;
  uint256 returnsItem;
}

library ItemInfo {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "ItemInfo", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004974656d496e666f0000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0066090001010101010120202000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, bool, bool, bool, bool, bool, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x006609006060606060601f1f1f00000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "itemId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](9);
    fieldNames[0] = "nonRemovable";
    fieldNames[1] = "nonPlaceable";
    fieldNames[2] = "isTool";
    fieldNames[3] = "isTable";
    fieldNames[4] = "isChair";
    fieldNames[5] = "isRotatable";
    fieldNames[6] = "themeId";
    fieldNames[7] = "itemCategory";
    fieldNames[8] = "returnsItem";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get nonRemovable.
   */
  function getNonRemovable(uint256 itemId) internal view returns (bool nonRemovable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get nonRemovable.
   */
  function _getNonRemovable(uint256 itemId) internal view returns (bool nonRemovable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set nonRemovable.
   */
  function setNonRemovable(uint256 itemId, bool nonRemovable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((nonRemovable)), _fieldLayout);
  }

  /**
   * @notice Set nonRemovable.
   */
  function _setNonRemovable(uint256 itemId, bool nonRemovable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((nonRemovable)), _fieldLayout);
  }

  /**
   * @notice Get nonPlaceable.
   */
  function getNonPlaceable(uint256 itemId) internal view returns (bool nonPlaceable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get nonPlaceable.
   */
  function _getNonPlaceable(uint256 itemId) internal view returns (bool nonPlaceable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set nonPlaceable.
   */
  function setNonPlaceable(uint256 itemId, bool nonPlaceable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((nonPlaceable)), _fieldLayout);
  }

  /**
   * @notice Set nonPlaceable.
   */
  function _setNonPlaceable(uint256 itemId, bool nonPlaceable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((nonPlaceable)), _fieldLayout);
  }

  /**
   * @notice Get isTool.
   */
  function getIsTool(uint256 itemId) internal view returns (bool isTool) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isTool.
   */
  function _getIsTool(uint256 itemId) internal view returns (bool isTool) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isTool.
   */
  function setIsTool(uint256 itemId, bool isTool) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((isTool)), _fieldLayout);
  }

  /**
   * @notice Set isTool.
   */
  function _setIsTool(uint256 itemId, bool isTool) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((isTool)), _fieldLayout);
  }

  /**
   * @notice Get isTable.
   */
  function getIsTable(uint256 itemId) internal view returns (bool isTable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isTable.
   */
  function _getIsTable(uint256 itemId) internal view returns (bool isTable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isTable.
   */
  function setIsTable(uint256 itemId, bool isTable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((isTable)), _fieldLayout);
  }

  /**
   * @notice Set isTable.
   */
  function _setIsTable(uint256 itemId, bool isTable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((isTable)), _fieldLayout);
  }

  /**
   * @notice Get isChair.
   */
  function getIsChair(uint256 itemId) internal view returns (bool isChair) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isChair.
   */
  function _getIsChair(uint256 itemId) internal view returns (bool isChair) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isChair.
   */
  function setIsChair(uint256 itemId, bool isChair) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isChair)), _fieldLayout);
  }

  /**
   * @notice Set isChair.
   */
  function _setIsChair(uint256 itemId, bool isChair) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isChair)), _fieldLayout);
  }

  /**
   * @notice Get isRotatable.
   */
  function getIsRotatable(uint256 itemId) internal view returns (bool isRotatable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isRotatable.
   */
  function _getIsRotatable(uint256 itemId) internal view returns (bool isRotatable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isRotatable.
   */
  function setIsRotatable(uint256 itemId, bool isRotatable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((isRotatable)), _fieldLayout);
  }

  /**
   * @notice Set isRotatable.
   */
  function _setIsRotatable(uint256 itemId, bool isRotatable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((isRotatable)), _fieldLayout);
  }

  /**
   * @notice Get themeId.
   */
  function getThemeId(uint256 itemId) internal view returns (uint256 themeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get themeId.
   */
  function _getThemeId(uint256 itemId) internal view returns (uint256 themeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set themeId.
   */
  function setThemeId(uint256 itemId, uint256 themeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((themeId)), _fieldLayout);
  }

  /**
   * @notice Set themeId.
   */
  function _setThemeId(uint256 itemId, uint256 themeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((themeId)), _fieldLayout);
  }

  /**
   * @notice Get itemCategory.
   */
  function getItemCategory(uint256 itemId) internal view returns (uint256 itemCategory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get itemCategory.
   */
  function _getItemCategory(uint256 itemId) internal view returns (uint256 itemCategory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set itemCategory.
   */
  function setItemCategory(uint256 itemId, uint256 itemCategory) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((itemCategory)), _fieldLayout);
  }

  /**
   * @notice Set itemCategory.
   */
  function _setItemCategory(uint256 itemId, uint256 itemCategory) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((itemCategory)), _fieldLayout);
  }

  /**
   * @notice Get returnsItem.
   */
  function getReturnsItem(uint256 itemId) internal view returns (uint256 returnsItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get returnsItem.
   */
  function _getReturnsItem(uint256 itemId) internal view returns (uint256 returnsItem) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set returnsItem.
   */
  function setReturnsItem(uint256 itemId, uint256 returnsItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((returnsItem)), _fieldLayout);
  }

  /**
   * @notice Set returnsItem.
   */
  function _setReturnsItem(uint256 itemId, uint256 returnsItem) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((returnsItem)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 itemId) internal view returns (ItemInfoData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 itemId) internal view returns (ItemInfoData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 itemId,
    bool nonRemovable,
    bool nonPlaceable,
    bool isTool,
    bool isTable,
    bool isChair,
    bool isRotatable,
    uint256 themeId,
    uint256 itemCategory,
    uint256 returnsItem
  ) internal {
    bytes memory _staticData = encodeStatic(
      nonRemovable,
      nonPlaceable,
      isTool,
      isTable,
      isChair,
      isRotatable,
      themeId,
      itemCategory,
      returnsItem
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 itemId,
    bool nonRemovable,
    bool nonPlaceable,
    bool isTool,
    bool isTable,
    bool isChair,
    bool isRotatable,
    uint256 themeId,
    uint256 itemCategory,
    uint256 returnsItem
  ) internal {
    bytes memory _staticData = encodeStatic(
      nonRemovable,
      nonPlaceable,
      isTool,
      isTable,
      isChair,
      isRotatable,
      themeId,
      itemCategory,
      returnsItem
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 itemId, ItemInfoData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.nonRemovable,
      _table.nonPlaceable,
      _table.isTool,
      _table.isTable,
      _table.isChair,
      _table.isRotatable,
      _table.themeId,
      _table.itemCategory,
      _table.returnsItem
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 itemId, ItemInfoData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.nonRemovable,
      _table.nonPlaceable,
      _table.isTool,
      _table.isTable,
      _table.isChair,
      _table.isRotatable,
      _table.themeId,
      _table.itemCategory,
      _table.returnsItem
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool nonRemovable,
      bool nonPlaceable,
      bool isTool,
      bool isTable,
      bool isChair,
      bool isRotatable,
      uint256 themeId,
      uint256 itemCategory,
      uint256 returnsItem
    )
  {
    nonRemovable = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    nonPlaceable = (_toBool(uint8(Bytes.getBytes1(_blob, 1))));

    isTool = (_toBool(uint8(Bytes.getBytes1(_blob, 2))));

    isTable = (_toBool(uint8(Bytes.getBytes1(_blob, 3))));

    isChair = (_toBool(uint8(Bytes.getBytes1(_blob, 4))));

    isRotatable = (_toBool(uint8(Bytes.getBytes1(_blob, 5))));

    themeId = (uint256(Bytes.getBytes32(_blob, 6)));

    itemCategory = (uint256(Bytes.getBytes32(_blob, 38)));

    returnsItem = (uint256(Bytes.getBytes32(_blob, 70)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ItemInfoData memory _table) {
    (
      _table.nonRemovable,
      _table.nonPlaceable,
      _table.isTool,
      _table.isTable,
      _table.isChair,
      _table.isRotatable,
      _table.themeId,
      _table.itemCategory,
      _table.returnsItem
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool nonRemovable,
    bool nonPlaceable,
    bool isTool,
    bool isTable,
    bool isChair,
    bool isRotatable,
    uint256 themeId,
    uint256 itemCategory,
    uint256 returnsItem
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        nonRemovable,
        nonPlaceable,
        isTool,
        isTable,
        isChair,
        isRotatable,
        themeId,
        itemCategory,
        returnsItem
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool nonRemovable,
    bool nonPlaceable,
    bool isTool,
    bool isTable,
    bool isChair,
    bool isRotatable,
    uint256 themeId,
    uint256 itemCategory,
    uint256 returnsItem
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      nonRemovable,
      nonPlaceable,
      isTool,
      isTable,
      isChair,
      isRotatable,
      themeId,
      itemCategory,
      returnsItem
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 itemId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
