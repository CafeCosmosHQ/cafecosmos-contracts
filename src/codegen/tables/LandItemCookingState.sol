// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct LandItemCookingStateData {
  uint256 yieldShares;
  uint256 collateral;
  uint256 recipeId;
  uint256 stoveId;
}

library LandItemCookingState {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "LandItemCookingS", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004c616e644974656d436f6f6b696e6753);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0080040020202020000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint256, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](4);
    keyNames[0] = "landId";
    keyNames[1] = "x";
    keyNames[2] = "y";
    keyNames[3] = "z";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "yieldShares";
    fieldNames[1] = "collateral";
    fieldNames[2] = "recipeId";
    fieldNames[3] = "stoveId";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get yieldShares.
   */
  function getYieldShares(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 yieldShares) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get yieldShares.
   */
  function _getYieldShares(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (uint256 yieldShares) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set yieldShares.
   */
  function setYieldShares(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 yieldShares) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((yieldShares)), _fieldLayout);
  }

  /**
   * @notice Set yieldShares.
   */
  function _setYieldShares(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 yieldShares) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((yieldShares)), _fieldLayout);
  }

  /**
   * @notice Get collateral.
   */
  function getCollateral(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 collateral) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get collateral.
   */
  function _getCollateral(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 collateral) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set collateral.
   */
  function setCollateral(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 collateral) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((collateral)), _fieldLayout);
  }

  /**
   * @notice Set collateral.
   */
  function _setCollateral(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 collateral) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((collateral)), _fieldLayout);
  }

  /**
   * @notice Get recipeId.
   */
  function getRecipeId(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 recipeId) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get recipeId.
   */
  function _getRecipeId(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 recipeId) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set recipeId.
   */
  function setRecipeId(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 recipeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((recipeId)), _fieldLayout);
  }

  /**
   * @notice Set recipeId.
   */
  function _setRecipeId(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 recipeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((recipeId)), _fieldLayout);
  }

  /**
   * @notice Get stoveId.
   */
  function getStoveId(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 stoveId) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get stoveId.
   */
  function _getStoveId(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 stoveId) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set stoveId.
   */
  function setStoveId(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 stoveId) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((stoveId)), _fieldLayout);
  }

  /**
   * @notice Set stoveId.
   */
  function _setStoveId(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 stoveId) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((stoveId)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (LandItemCookingStateData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (LandItemCookingStateData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z,
    uint256 yieldShares,
    uint256 collateral,
    uint256 recipeId,
    uint256 stoveId
  ) internal {
    bytes memory _staticData = encodeStatic(yieldShares, collateral, recipeId, stoveId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z,
    uint256 yieldShares,
    uint256 collateral,
    uint256 recipeId,
    uint256 stoveId
  ) internal {
    bytes memory _staticData = encodeStatic(yieldShares, collateral, recipeId, stoveId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 landId, uint256 x, uint256 y, uint256 z, LandItemCookingStateData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.yieldShares, _table.collateral, _table.recipeId, _table.stoveId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 landId, uint256 x, uint256 y, uint256 z, LandItemCookingStateData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.yieldShares, _table.collateral, _table.recipeId, _table.stoveId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 yieldShares, uint256 collateral, uint256 recipeId, uint256 stoveId) {
    yieldShares = (uint256(Bytes.getBytes32(_blob, 0)));

    collateral = (uint256(Bytes.getBytes32(_blob, 32)));

    recipeId = (uint256(Bytes.getBytes32(_blob, 64)));

    stoveId = (uint256(Bytes.getBytes32(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (LandItemCookingStateData memory _table) {
    (_table.yieldShares, _table.collateral, _table.recipeId, _table.stoveId) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 landId, uint256 x, uint256 y, uint256 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 landId, uint256 x, uint256 y, uint256 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 yieldShares,
    uint256 collateral,
    uint256 recipeId,
    uint256 stoveId
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(yieldShares, collateral, recipeId, stoveId);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 yieldShares,
    uint256 collateral,
    uint256 recipeId,
    uint256 stoveId
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(yieldShares, collateral, recipeId, stoveId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 landId, uint256 x, uint256 y, uint256 z) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    return _keyTuple;
  }
}
