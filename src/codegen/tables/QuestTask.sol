// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct QuestTaskData {
  uint256 questId;
  uint256 taskType;
  bytes32 key;
  uint256 quantity;
  bool exists;
  string name;
  bytes32[] taskKeys;
}

library QuestTask {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "QuestTask", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000051756573745461736b00000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0081050220202020010000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, bytes32, uint256, bool, string, bytes32[])
  Schema constant _valueSchema = Schema.wrap(0x008105021f1f5f1f60c5c1000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "taskId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "questId";
    fieldNames[1] = "taskType";
    fieldNames[2] = "key";
    fieldNames[3] = "quantity";
    fieldNames[4] = "exists";
    fieldNames[5] = "name";
    fieldNames[6] = "taskKeys";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get questId.
   */
  function getQuestId(bytes32 taskId) internal view returns (uint256 questId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get questId.
   */
  function _getQuestId(bytes32 taskId) internal view returns (uint256 questId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set questId.
   */
  function setQuestId(bytes32 taskId, uint256 questId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((questId)), _fieldLayout);
  }

  /**
   * @notice Set questId.
   */
  function _setQuestId(bytes32 taskId, uint256 questId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((questId)), _fieldLayout);
  }

  /**
   * @notice Get taskType.
   */
  function getTaskType(bytes32 taskId) internal view returns (uint256 taskType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get taskType.
   */
  function _getTaskType(bytes32 taskId) internal view returns (uint256 taskType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set taskType.
   */
  function setTaskType(bytes32 taskId, uint256 taskType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((taskType)), _fieldLayout);
  }

  /**
   * @notice Set taskType.
   */
  function _setTaskType(bytes32 taskId, uint256 taskType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((taskType)), _fieldLayout);
  }

  /**
   * @notice Get key.
   */
  function getKey(bytes32 taskId) internal view returns (bytes32 key) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get key.
   */
  function _getKey(bytes32 taskId) internal view returns (bytes32 key) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set key.
   */
  function setKey(bytes32 taskId, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((key)), _fieldLayout);
  }

  /**
   * @notice Set key.
   */
  function _setKey(bytes32 taskId, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((key)), _fieldLayout);
  }

  /**
   * @notice Get quantity.
   */
  function getQuantity(bytes32 taskId) internal view returns (uint256 quantity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get quantity.
   */
  function _getQuantity(bytes32 taskId) internal view returns (uint256 quantity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set quantity.
   */
  function setQuantity(bytes32 taskId, uint256 quantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((quantity)), _fieldLayout);
  }

  /**
   * @notice Set quantity.
   */
  function _setQuantity(bytes32 taskId, uint256 quantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((quantity)), _fieldLayout);
  }

  /**
   * @notice Get exists.
   */
  function getExists(bytes32 taskId) internal view returns (bool exists) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get exists.
   */
  function _getExists(bytes32 taskId) internal view returns (bool exists) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set exists.
   */
  function setExists(bytes32 taskId, bool exists) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((exists)), _fieldLayout);
  }

  /**
   * @notice Set exists.
   */
  function _setExists(bytes32 taskId, bool exists) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((exists)), _fieldLayout);
  }

  /**
   * @notice Get name.
   */
  function getName(bytes32 taskId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get name.
   */
  function _getName(bytes32 taskId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set name.
   */
  function setName(bytes32 taskId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Set name.
   */
  function _setName(bytes32 taskId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Get the length of name.
   */
  function lengthName(bytes32 taskId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of name.
   */
  function _lengthName(bytes32 taskId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemName(bytes32 taskId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemName(bytes32 taskId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to name.
   */
  function pushName(bytes32 taskId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to name.
   */
  function _pushName(bytes32 taskId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from name.
   */
  function popName(bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from name.
   */
  function _popName(bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function updateName(bytes32 taskId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function _updateName(bytes32 taskId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get taskKeys.
   */
  function getTaskKeys(bytes32 taskId) internal view returns (bytes32[] memory taskKeys) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Get taskKeys.
   */
  function _getTaskKeys(bytes32 taskId) internal view returns (bytes32[] memory taskKeys) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Set taskKeys.
   */
  function setTaskKeys(bytes32 taskId, bytes32[] memory taskKeys) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((taskKeys)));
  }

  /**
   * @notice Set taskKeys.
   */
  function _setTaskKeys(bytes32 taskId, bytes32[] memory taskKeys) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((taskKeys)));
  }

  /**
   * @notice Get the length of taskKeys.
   */
  function lengthTaskKeys(bytes32 taskId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of taskKeys.
   */
  function _lengthTaskKeys(bytes32 taskId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of taskKeys.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTaskKeys(bytes32 taskId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Get an item of taskKeys.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTaskKeys(bytes32 taskId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Push an element to taskKeys.
   */
  function pushTaskKeys(bytes32 taskId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to taskKeys.
   */
  function _pushTaskKeys(bytes32 taskId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from taskKeys.
   */
  function popTaskKeys(bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from taskKeys.
   */
  function _popTaskKeys(bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of taskKeys at `_index`.
   */
  function updateTaskKeys(bytes32 taskId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of taskKeys at `_index`.
   */
  function _updateTaskKeys(bytes32 taskId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 taskId) internal view returns (QuestTaskData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 taskId) internal view returns (QuestTaskData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 taskId,
    uint256 questId,
    uint256 taskType,
    bytes32 key,
    uint256 quantity,
    bool exists,
    string memory name,
    bytes32[] memory taskKeys
  ) internal {
    bytes memory _staticData = encodeStatic(questId, taskType, key, quantity, exists);

    EncodedLengths _encodedLengths = encodeLengths(name, taskKeys);
    bytes memory _dynamicData = encodeDynamic(name, taskKeys);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 taskId,
    uint256 questId,
    uint256 taskType,
    bytes32 key,
    uint256 quantity,
    bool exists,
    string memory name,
    bytes32[] memory taskKeys
  ) internal {
    bytes memory _staticData = encodeStatic(questId, taskType, key, quantity, exists);

    EncodedLengths _encodedLengths = encodeLengths(name, taskKeys);
    bytes memory _dynamicData = encodeDynamic(name, taskKeys);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 taskId, QuestTaskData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.questId,
      _table.taskType,
      _table.key,
      _table.quantity,
      _table.exists
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name, _table.taskKeys);
    bytes memory _dynamicData = encodeDynamic(_table.name, _table.taskKeys);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 taskId, QuestTaskData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.questId,
      _table.taskType,
      _table.key,
      _table.quantity,
      _table.exists
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name, _table.taskKeys);
    bytes memory _dynamicData = encodeDynamic(_table.name, _table.taskKeys);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 questId, uint256 taskType, bytes32 key, uint256 quantity, bool exists) {
    questId = (uint256(Bytes.getBytes32(_blob, 0)));

    taskType = (uint256(Bytes.getBytes32(_blob, 32)));

    key = (Bytes.getBytes32(_blob, 64));

    quantity = (uint256(Bytes.getBytes32(_blob, 96)));

    exists = (_toBool(uint8(Bytes.getBytes1(_blob, 128))));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory name, bytes32[] memory taskKeys) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    taskKeys = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (QuestTaskData memory _table) {
    (_table.questId, _table.taskType, _table.key, _table.quantity, _table.exists) = decodeStatic(_staticData);

    (_table.name, _table.taskKeys) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 taskId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 questId,
    uint256 taskType,
    bytes32 key,
    uint256 quantity,
    bool exists
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(questId, taskType, key, quantity, exists);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    string memory name,
    bytes32[] memory taskKeys
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(name).length, taskKeys.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory name, bytes32[] memory taskKeys) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((name)), EncodeArray.encode((taskKeys)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 questId,
    uint256 taskType,
    bytes32 key,
    uint256 quantity,
    bool exists,
    string memory name,
    bytes32[] memory taskKeys
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(questId, taskType, key, quantity, exists);

    EncodedLengths _encodedLengths = encodeLengths(name, taskKeys);
    bytes memory _dynamicData = encodeDynamic(name, taskKeys);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 taskId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = taskId;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
