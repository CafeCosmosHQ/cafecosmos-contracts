// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct LandItemData {
  uint256 itemId;
  uint256 placementTime;
  uint256 dynamicUnlockTimes;
  uint256 dynamicTimeoutTimes;
  bool isRotated;
}

library LandItem {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "LandItem", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004c616e644974656d0000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0081050020202020010000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint256, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, bool)
  Schema constant _valueSchema = Schema.wrap(0x008105001f1f1f1f600000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](4);
    keyNames[0] = "landId";
    keyNames[1] = "x";
    keyNames[2] = "y";
    keyNames[3] = "z";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "itemId";
    fieldNames[1] = "placementTime";
    fieldNames[2] = "dynamicUnlockTimes";
    fieldNames[3] = "dynamicTimeoutTimes";
    fieldNames[4] = "isRotated";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get itemId.
   */
  function getItemId(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 itemId) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get itemId.
   */
  function _getItemId(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (uint256 itemId) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set itemId.
   */
  function setItemId(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((itemId)), _fieldLayout);
  }

  /**
   * @notice Set itemId.
   */
  function _setItemId(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((itemId)), _fieldLayout);
  }

  /**
   * @notice Get placementTime.
   */
  function getPlacementTime(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (uint256 placementTime) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get placementTime.
   */
  function _getPlacementTime(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (uint256 placementTime) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set placementTime.
   */
  function setPlacementTime(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 placementTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((placementTime)), _fieldLayout);
  }

  /**
   * @notice Set placementTime.
   */
  function _setPlacementTime(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 placementTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((placementTime)), _fieldLayout);
  }

  /**
   * @notice Get dynamicUnlockTimes.
   */
  function getDynamicUnlockTimes(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (uint256 dynamicUnlockTimes) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get dynamicUnlockTimes.
   */
  function _getDynamicUnlockTimes(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (uint256 dynamicUnlockTimes) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set dynamicUnlockTimes.
   */
  function setDynamicUnlockTimes(uint256 landId, uint256 x, uint256 y, uint256 z, uint256 dynamicUnlockTimes) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((dynamicUnlockTimes)), _fieldLayout);
  }

  /**
   * @notice Set dynamicUnlockTimes.
   */
  function _setDynamicUnlockTimes(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z,
    uint256 dynamicUnlockTimes
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((dynamicUnlockTimes)), _fieldLayout);
  }

  /**
   * @notice Get dynamicTimeoutTimes.
   */
  function getDynamicTimeoutTimes(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (uint256 dynamicTimeoutTimes) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get dynamicTimeoutTimes.
   */
  function _getDynamicTimeoutTimes(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z
  ) internal view returns (uint256 dynamicTimeoutTimes) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set dynamicTimeoutTimes.
   */
  function setDynamicTimeoutTimes(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z,
    uint256 dynamicTimeoutTimes
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((dynamicTimeoutTimes)), _fieldLayout);
  }

  /**
   * @notice Set dynamicTimeoutTimes.
   */
  function _setDynamicTimeoutTimes(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z,
    uint256 dynamicTimeoutTimes
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((dynamicTimeoutTimes)), _fieldLayout);
  }

  /**
   * @notice Get isRotated.
   */
  function getIsRotated(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (bool isRotated) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isRotated.
   */
  function _getIsRotated(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (bool isRotated) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isRotated.
   */
  function setIsRotated(uint256 landId, uint256 x, uint256 y, uint256 z, bool isRotated) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isRotated)), _fieldLayout);
  }

  /**
   * @notice Set isRotated.
   */
  function _setIsRotated(uint256 landId, uint256 x, uint256 y, uint256 z, bool isRotated) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((isRotated)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (LandItemData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 landId, uint256 x, uint256 y, uint256 z) internal view returns (LandItemData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z,
    uint256 itemId,
    uint256 placementTime,
    uint256 dynamicUnlockTimes,
    uint256 dynamicTimeoutTimes,
    bool isRotated
  ) internal {
    bytes memory _staticData = encodeStatic(itemId, placementTime, dynamicUnlockTimes, dynamicTimeoutTimes, isRotated);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 landId,
    uint256 x,
    uint256 y,
    uint256 z,
    uint256 itemId,
    uint256 placementTime,
    uint256 dynamicUnlockTimes,
    uint256 dynamicTimeoutTimes,
    bool isRotated
  ) internal {
    bytes memory _staticData = encodeStatic(itemId, placementTime, dynamicUnlockTimes, dynamicTimeoutTimes, isRotated);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 landId, uint256 x, uint256 y, uint256 z, LandItemData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemId,
      _table.placementTime,
      _table.dynamicUnlockTimes,
      _table.dynamicTimeoutTimes,
      _table.isRotated
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 landId, uint256 x, uint256 y, uint256 z, LandItemData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemId,
      _table.placementTime,
      _table.dynamicUnlockTimes,
      _table.dynamicTimeoutTimes,
      _table.isRotated
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 itemId,
      uint256 placementTime,
      uint256 dynamicUnlockTimes,
      uint256 dynamicTimeoutTimes,
      bool isRotated
    )
  {
    itemId = (uint256(Bytes.getBytes32(_blob, 0)));

    placementTime = (uint256(Bytes.getBytes32(_blob, 32)));

    dynamicUnlockTimes = (uint256(Bytes.getBytes32(_blob, 64)));

    dynamicTimeoutTimes = (uint256(Bytes.getBytes32(_blob, 96)));

    isRotated = (_toBool(uint8(Bytes.getBytes1(_blob, 128))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (LandItemData memory _table) {
    (
      _table.itemId,
      _table.placementTime,
      _table.dynamicUnlockTimes,
      _table.dynamicTimeoutTimes,
      _table.isRotated
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 landId, uint256 x, uint256 y, uint256 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 landId, uint256 x, uint256 y, uint256 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 itemId,
    uint256 placementTime,
    uint256 dynamicUnlockTimes,
    uint256 dynamicTimeoutTimes,
    bool isRotated
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(itemId, placementTime, dynamicUnlockTimes, dynamicTimeoutTimes, isRotated);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 itemId,
    uint256 placementTime,
    uint256 dynamicUnlockTimes,
    uint256 dynamicTimeoutTimes,
    bool isRotated
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(itemId, placementTime, dynamicUnlockTimes, dynamicTimeoutTimes, isRotated);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 landId, uint256 x, uint256 y, uint256 z) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](4);
    _keyTuple[0] = bytes32(uint256(landId));
    _keyTuple[1] = bytes32(uint256(x));
    _keyTuple[2] = bytes32(uint256(y));
    _keyTuple[3] = bytes32(uint256(z));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
